syntax = "proto3";


package User;


import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/type/date.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
external_docs: {
url: "https://github.com/transavro/UserService";
description: "User Service repository";
}
schemes: HTTPS;
};

service UserService {

    rpc AddUser (User) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/userservice/v1/addUser"
            body: "*"
        };
    }

    rpc ListUsers (google.protobuf.Empty) returns (stream User) {
        option (google.api.http) = {
            get: "/userservice/v1/listUsers"
        };
    }

    rpc GetUser (GetRequest) returns (User) {
        option (google.api.http) = {
                get:"/userservice/v1/getUser/{googleId}"
        };
    }


    rpc UpdateUser (User) returns (User) {
        option (google.api.http) = {
            put: "/userservice/v1/updateUser/{googleId}"
            body: "*"
        };
    }

    rpc DeleteUser (DeleteRequest) returns (DeleteReponse) {
        option (google.api.http) = {
                delete:"/userservice/v1/deleteUser/{googleId}"
        };
    }

    rpc AddTvDevice (TvDevice) returns (LinkedDeviceResponse) {
        option (google.api.http) = {
            post: "/userservice/v1/addTvDevice"
            body: "*"
        };
    }


    // tv emac without collons
    rpc RemoveTvDevice (RemoveTvDeviceRequest) returns (RemoveTvDeviceResponse) {
        option (google.api.http) = {
                post:"/userservice/v1/removeTvDevice"
                body: "*"
        };
    }

    rpc GetLinkedDevices (GetRequest) returns (LinkedDeviceResponse) {
        option (google.api.http) = {
                get:"/userservice/v1/getLinkDevices/{googleId}"
        };
    }

    rpc GetLinkedUsers (LinkUserRequest) returns (LinkUserResponse) {
        option (google.api.http) = {
                get:"/userservice/v1/getLinkUsers/{tvEmac}"
        };
    }
}


message LinkUserRequest {
    string tvEmac = 1 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Emac cannot be empty."
    }];
}

message LinkUserResponse {
    repeated User user = 1;
}


message RemoveTvDeviceRequest {
    string googleId = 1 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "User Id cannot be empty."
    }];
    string tvEmac = 2 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Emac cannot be empty."
    }];
}

message RemoveTvDeviceResponse {
    bool isTvDeviceRemoved = 1;
}

message GetRequest {
    string googleId = 1 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "User Id cannot be empty."
    }];
}

message DeleteRequest {
    string googleId = 1 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "User Id cannot be empty."
    }];
}

message DeleteReponse {
    bool isDeleted = 1;
}

message LinkedDeviceResponse {
    bool isLinkedDeviceFetched = 1;
    repeated LinkedDevice linkedDevices = 2;
}


message TvDevice {
    string googleId = 1 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "User Id cannot be empty."
    }];
    LinkedDevice linkedDevice = 2;
}

message UpdateResponse {
    bool isUpdated = 1;
}

message CreateReponse {
    bool isCreated = 1;
}

enum Gender {
    NOTDEFINED = 0;
    MALE = 1;
    FEMALE = 2;
}

// Date dd/MM/YYYY
message User {

    // important_string must be a lowercase alpha-numeric of 5 to 30 characters (RE2 syntax).
    string name = 1 [(validator.field) = {
    regex: "^[a-zA-Z ]{3,20}$"
    human_error: "User name cannot contain Numbers"
    }];

    string email = 2 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Email id cannot contain be empty"
    }];

    string phoneNumber = 3 [(validator.field) = {
    regex: "^[0-9]*$"
    length_eq : 10
    msg_exists : true
    string_not_empty : true
    human_error: "Phone number must be of 10 digit and should be consist of only numbers."
    }];

    string googleId = 4 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "User Id cannot be empty."
    }];


    google.type.Date dateOfBirth = 5 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Date of birth cannot be empty."
    }];


    Gender gender = 12 [(validator.field) = {
    msg_exists : true
    is_in_enum : true
    human_error: "Gender cannot be empty or Invalid."
    }];


    string imageUrl = 13 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Image Url cannot be empty."
    }];


    repeated string genre = 6
    [(validator.field) = {
    repeated_count_min : 3
    string_not_empty : true
    msg_exists : true
    human_error: "Please Select Genre greater than 3 and cannot be empty."
    }];


    repeated string language = 7
    [(validator.field) = {
    repeated_count_min : 3
    string_not_empty : true
    msg_exists : true
    human_error: "Please Select Language greater than 3 and cannot be empty."
    }];


    repeated string contentType = 8
    [(validator.field) = {
    repeated_count_min : 3
    string_not_empty : true
    msg_exists : true
    human_error: "Please Select ContentType greater than 3 and cannot be empty."
    }];


    repeated LinkedDevice linkedDevices = 9;
    google.protobuf.Timestamp createdAt = 10;
    google.protobuf.Timestamp updatedAt = 11;
}

message LinkedDevice {

    string tvEmac = 1  [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Emac cannot be empty."
    }];

    string tvPanel = 2 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Panel cannot be empty."
    }];

    string tvBoard = 3 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Board cannot be empty."
    }];

    string tvName = 4 [(validator.field) = {
    msg_exists : true
    string_not_empty : true
    human_error: "Tv Name cannot be empty."
    }];
}